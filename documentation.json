{
    "pipes": [],
    "interfaces": [
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/components/example/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-fb6852245e113aeb95892ce476ba3c1fa91badc9f51e6c5762bde6d67a72e6e21d3899b01af7d54e5ddc4e4ccf5ec7efdd9c5db8fa78c92caf4ef599fca12b84",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "\"taskbox\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {\n  title = \"taskbox\";\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "templateData": ""
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-a802e6b2c4b4cd2db65089150bb2c14a873e422a58f656959cfe76b2b03d5cff0d9a89a6803e158b50463f10b66c3b783d1ee953d6b03d24f2b48bfca885acdb",
            "file": "src/components/example/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "\"Button\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "\"medium\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from \"@angular/core\";\n\n@Component({\n  selector: \"storybook-button\",\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: [\"./button.css\"],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: \"small\" | \"medium\" | \"large\" = \"medium\";\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = \"Button\";\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary\n      ? \"storybook-button--primary\"\n      : \"storybook-button--secondary\";\n    return [\"storybook-button\", `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "Calendar",
            "id": "component-Calendar-e9fb162ec7f77b23560fb5a07815d0e0eb78ace9b02f8fe5b17709ddf1c19899451ab89002ab4c0e58d559c1944220b1c9456cdc7e3073cea56238fbdcfc3db8",
            "file": "src/components/maquette/calendar/calendar.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "apec-calendar",
            "styleUrls": [],
            "styles": [],
            "template": "./calendar.html",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\nimport { StoryFn, Meta } from \"@storybook/angular\";\nimport { Environment } from \"nunjucks/index\";\n// import calendar from \"./calendar.html\";\n// console.log(calendar);\n// const env = nunjucks.÷configure('../../../../')\n\n@Component({ selector: \"apec-calendar\", template: \"./calendar.html\" })\nclass Calendar {}\n\nexport default {\n  title: \"Maquette/Calendar\",\n  component: Calendar,\n  argTypes: {},\n} as Meta;\n\nexport const Playground: StoryFn<Calendar> = (args: Calendar) => ({\n  props: args,\n});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CreerPlageComponent",
            "id": "component-CreerPlageComponent-4c55259f6b0dd9824b14123c28bd93aec348e521d46ed963d75c5dd55232aab3edf7a707892db4c47e8973956fd04ef98e12d4731744df1979700866aed89347",
            "file": "src/components/maquette/plage-horaire/creer-plage.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "apec-creer-plage",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./creer-plage.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\nimport { StoryFn, Meta } from \"@storybook/angular\";\n\n@Component({\n  selector: \"apec-creer-plage\",\n  templateUrl: \"./creer-plage.html\",\n})\nclass CreerPlageComponent {}\n\nexport default {\n  title: \"Maquette/CreerPlage\",\n  component: CreerPlageComponent,\n  argTypes: {},\n} as Meta;\n\nexport const Playground: StoryFn<CreerPlageComponent> = (\n  args: CreerPlageComponent\n) => ({ props: args });\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div class=\"wrapper-filters active\">\r\n  <div class=\"creer-plage sidebar-filters push-open\">\r\n    <div class=\"filters-content-container\">\r\n      <a class=\"btn btn-transparent btn-close\" *ngIf=\"calendrierService.showFilter\" (click)=\"hideFilter()\">\r\n        <img src=\"../../../../../../assets/images/common/picto_close.svg\" width=\"16\" height=\"16\" alt=\"Fermer\" />\r\n      </a>\r\n      <form class=\"row\" name=\"form\" (ngSubmit)=\"form.valid && enregistrer()\" #form=\"ngForm\" novalidate>\r\n        <div class=\"col\">\r\n          <!-- Input Date, apec-input-text : -->\r\n          {% set compoMode = 'edit' %} {% set compoType = 'date' %} {% set compoLabel = 'Composant input date' %} {% set compoId = 'inputedit2' %} {% set compoPlaceholder = 'Placeholder' %} {% set\r\n          compoValue = 'Lorem ipsum' %} {% set compoClass = '' %} {% set compoRequire = false %} {% include \"html/templates/labo/component-input.html\" %}\r\n          <!--<apec-input-text [name]=\"'date'\" [label]=\"'Date '\" [type]=\"'date'\" [(ngModel)]=\"creationModel.date\"></apec-input-text>\r\n       -->\r\n\r\n          <!-- TODO remplacer par Input number, apec-input-text : -->\r\n          <div class=\"floating-label\" apec-validation>\r\n            <input\r\n                    type=\"number\"\r\n                    class=\"floating-input session-hour\"\r\n                    placeholder=\"\"\r\n                    name=\"heureDebut\"\r\n                    #heureDebut=\"ngModel\"\r\n                    [(ngModel)]=\"creationModel.heureDebut\"\r\n                    min=\"0\"\r\n                    max=\"23\"\r\n                    id=\"heureDebut\"\r\n                    [ngClass]=\"{ 'input-error': form.submitted && heureDebut.invalid }\"\r\n                    required />\r\n            <span class=\"highlight\"></span>\r\n            <label>Heure de début *</label>\r\n          </div>\r\n\r\n          <!-- TODO remplacer par Input number, apec-input-text : -->\r\n          <div class=\"floating-label session-minutes\" apec-validation>\r\n            <input\r\n                    type=\"number\"\r\n                    class=\"floating-input\"\r\n                    placeholder=\"\"\r\n                    name=\"heureFin\"\r\n                    #minuteDebut=\"ngModel\"\r\n                    [(ngModel)]=\"creationModel.heureFin\"\r\n                    min=\"0\"\r\n                    max=\"23\"\r\n                    id=\"heureFin\"\r\n                    [ngClass]=\"{ 'input-error': form.submitted && minuteDebut.invalid }\"\r\n                    required />\r\n            <span class=\"highlight\"></span>\r\n            <label>Heure de fin *</label>\r\n          </div>\r\n\r\n\r\n          <!-- Toggle Journee, apec-slidebox : -->\r\n          <div class=\"filter-option\">\r\n            <span>Journée</span>\r\n            {%\r\n            set compoIdToggle = 'toggleJournee' %} {% set compoNameToggle = 'toggleJournee' %} {% set compoToggleChecked = '' %} {% include \"html/templates/labo/component-toggle.html\" %}\r\n          </div>\r\n          <!-- <apec-slidebox [label]=\"'Journée'\" [(model)]=\"creationModel.journee\"></apec-slidebox>-->\r\n\r\n          <!-- SELECT Type, apec-input-select : -->\r\n          {% set compoMode = 'edit' %}\r\n          {% set compoLabel = 'Type' %}\r\n          {% set compoId = 'idType' %}\r\n          {% set compoClass = '' %}\r\n          {% set compoRequire = false %}\r\n          {% set compoValues = ['Choisissez ...', 'Atelier', 'Autre-Type évènement', 'Entretien', 'Entretien de suivi', 'Entretien PM'] %}\r\n          {% set compoSelect = '' %}\r\n          {% include \"html/templates/labo/component-select.html\" %}\r\n         <!-- <apec-input-select\r\n                  [name]=\"'type'\"\r\n                  [label]=\"'Type'\"\r\n                  [(ngModel)]=\"creationModel.type\"\r\n                  [optionItems]=\"'TYPE_EVENEMENT' | apecReferentielFromCodePresentation\"\r\n                  [optionValueKey]=\"'idNomenclature'\"\r\n                  [optionLabelKey]=\"'libelle'\"></apec-input-select>-->\r\n\r\n\r\n          <!-- Toggle Invisible sur Apec.fr, apec-slidebox : -->\r\n          <div class=\"filter-option\">\r\n            <span>Invisible sur Apec.fr</span>\r\n            {%\r\n            set compoIdToggle = 'toggleInvisibleApec' %} {% set compoNameToggle = 'toggleInvisibleApec' %} {% set compoToggleChecked = '' %} {% include \"html/templates/labo/component-toggle.html\" %}\r\n          </div>\r\n          <!--<apec-slidebox [label]=\"'Invisible sur Apec.fr'\" [(model)]=\"creationModel.invisibleApec\"></apec-slidebox>-->\r\n\r\n          <!-- Checkbox Spécialités, apec-multiple-checkbox -->\r\n          {% set compoMode = 'edit' %}\r\n          {% set compoType = 'checkbox' %}\r\n          {% set compoLabel = 'Spécialités' %}\r\n          {% set compoId = 'statut' %}\r\n          {% set compoClass = '' %}\r\n          {% set compoRequire = false %}\r\n          {% set compoTitle = 'Spécialités' %}\r\n          {% set compoRadiocheckNb = '3' %}\r\n\r\n          {% include \"html/templates/labo/component-radiocheck.html\" %}\r\n\r\n          <!--<apec-multiple-checkbox [data]=\"specialites\" [(model)]=\"creationModel.specialites\" [label]=\"'Spécialités'\"></apec-multiple-checkbox>-->\r\n\r\n\r\n\r\n          <apec-input-text [name]=\"'titre'\" [type]=\"'text'\" [label]=\"'Objet/Titre'\" [(ngModel)]=\"creationModel.titre\" maxlength=\"50\"></apec-input-text>\r\n          <apec-input-select\r\n                  [name]=\"'modalite'\"\r\n                  [label]=\"'Modalité'\"\r\n                  [(ngModel)]=\"creationModel.modalite\"\r\n                  [optionItems]=\"'SERVICE_PRESTATION_CANAL' | apecReferentielFromCodePresentation\"\r\n                  [optionValueKey]=\"'idNomenclature'\"\r\n                  [optionLabelKey]=\"'libelle'\"></apec-input-select>\r\n          <apec-input-radio [options]=\"CibleRadioOptions\" [name]=\"'cible'\" [label]=\"''\" [direction]=\"'x'\" [(ngModel)]=\"creationModel.cible\"></apec-input-radio>\r\n          <apec-input-text [name]=\"'nomDuClient'\" [label]=\"'Nom du client'\" [type]=\"'text'\" [(ngModel)]=\"creationModel.nomDuClient\"></apec-input-text>\r\n          <apec-input-text [name]=\"'fonction'\" [label]=\"'Fonction'\" [type]=\"'text'\" [(ngModel)]=\"creationModel.fonction\"></apec-input-text>\r\n          <apec-input-text [name]=\"'demande'\" [label]=\"'Demande'\" [type]=\"'text'\" [(ngModel)]=\"creationModel.demande\"></apec-input-text>\r\n          <apec-input-text [name]=\"'email'\" [label]=\"'E-mail'\" [type]=\"'email'\" [(ngModel)]=\"creationModel.email\"></apec-input-text>\r\n          <apec-input-text [name]=\"'telephone'\" [label]=\"'Téléphone'\" [type]=\"'text'\" [(ngModel)]=\"creationModel.telephone\"></apec-input-text>\r\n          <div class=\"floating-textarea\">\r\n            <textarea [(ngModel)]=\"creationModel.description\" id=\"externes\" name=\"externes\"></textarea>\r\n            <span class=\"highlight\"></span>\r\n            <label>Description</label>\r\n          </div>\r\n          <apec-input-checkbox\r\n                  [name]=\"'rappelRdv'\"\r\n                  [label]=\"'Rappel du RDV'\"\r\n                  [direction]=\"'x'\"\r\n                  [options]=\"[{ checked: false }]\"\r\n                  (change)=\"creationModel.rappelRdv = $event.target['checked']\"></apec-input-checkbox>\r\n          <apec-input-checkbox\r\n                  [name]=\"'rdvConfidentiel'\"\r\n                  [label]=\"'RDV confidentiel'\"\r\n                  [direction]=\"'x'\"\r\n                  [options]=\"[{ checked: false }]\"\r\n                  (change)=\"creationModel.rdvConfidentiel = $event.target['checked']\"></apec-input-checkbox>\r\n        </div>\r\n      </form>\r\n    </div>\r\n    <div class=\"row disp-flex-center\">\r\n      <button class=\"btn btn-filter\" role=\"button\" title=\"Filtrer\" (click)=\"enregistrer()\">\r\n        <span>Enregistrer</span>\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-61ee9d991dca1d47ef5ba05e533fb70cddedbf71cba9c753b35c54e22057772e50b301efa9090440ed5d9b8c608bd331d92a14a88432f44d7dc9f4be094d479c",
            "file": "src/components/example/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg\n          width=\"32\"\n          height=\"32\"\n          viewBox=\"0 0 32 32\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from \"@angular/core\";\nimport { User } from \"../User\";\n\n@Component({\n  selector: \"storybook-header\",\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg\n          width=\"32\"\n          height=\"32\"\n          viewBox=\"0 0 32 32\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: [\"./header.css\"],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "MultipleCheckboxComponent",
            "id": "component-MultipleCheckboxComponent-17c75660dc1790db81a1c1cf5f4c31fbf5560a5a3afcdcdc45de07f29698c75eb58b94c7ae6e600db48f9debd123975a36cefa51bf7192fbd4f35aeb483640ba",
            "file": "src/components/si/multiple-checkbox/multiple-checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "apec-multiple-checkbox",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./multiple-checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                },
                {
                    "name": "modelChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "idsNom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "isCheckedBox",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackByIndex",
                    "args": [
                        {
                            "name": "index",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCritere",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: \"apec-multiple-checkbox\",\r\n  templateUrl: \"./multiple-checkbox.component.html\",\r\n})\r\nexport class MultipleCheckboxComponent {\r\n  @Input() label: string;\r\n  @Input() data: any;\r\n  @Input() get model() {\r\n    return this.idsNom;\r\n  }\r\n\r\n  set model(val) {\r\n    this.idsNom = val;\r\n    this.modelChange.emit(this.idsNom);\r\n  }\r\n  @Output() change = new EventEmitter();\r\n  @Output() modelChange = new EventEmitter();\r\n  idsNom: any;\r\n\r\n  updateCritere(id: number) {\r\n    let selection = this.idsNom;\r\n    if (!selection) {\r\n      selection = [];\r\n    }\r\n    // si le critere est deja selectionne, on le retire de la selection\r\n    if (selection.indexOf(id) > -1) {\r\n      selection = selection.filter((critereId: any) => {\r\n        return critereId !== id;\r\n      });\r\n    } else {\r\n      selection.push(id);\r\n    }\r\n\r\n    this.model = selection;\r\n    this.change.emit();\r\n  }\r\n\r\n  isCheckedBox(id: any) {\r\n    if (this.idsNom) {\r\n      return this.idsNom.indexOf(id) > -1;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  trackByIndex(index: any) {\r\n    return index;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "model": {
                    "name": "model",
                    "setSignature": {
                        "name": "model",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 14,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "model",
                        "type": "",
                        "returnType": "",
                        "line": 10
                    }
                }
            },
            "templateData": "<span for=\"filter-status\" class=\"label-name\">{{ label }}</span>\r\n<label for=\"statut_{{ opt.idNomenclature }}\" class=\"custom-checkbox\" *ngFor=\"let opt of data; trackBy: trackByIndex\">\r\n  {{ opt.libelle }}\r\n  <input id=\"statut_{{ opt.idNomenclature }}\" type=\"checkbox\" [checked]=\"isCheckedBox(opt.idNomenclature)\" (click)=\"updateCritere(opt.idNomenclature)\" />\r\n  <span class=\"checkmark\"></span>\r\n</label>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-ffe802837fbe7a5316cbf24d0cb724539daa80e142cc87d7bee09658feea806288a559a29f6a28fe27b74fb236ebe16e8aa4d8169fae40f4d7180e0bf5b3fa19",
            "file": "src/components/example/page/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a\n          href=\"https://componentdriven.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page\n        states without needing to navigate to them in your app. Here are some\n        handy patterns for managing page data in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose\n          such data from the \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock\n          these services out using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a\n          href=\"https://storybook.js.org/tutorials/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a\n          href=\"https://storybook.js.org/docs\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg\n          width=\"10\"\n          height=\"10\"\n          viewBox=\"0 0 12 12\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 83
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\nimport { User } from \"../User\";\n\n@Component({\n  selector: \"storybook-page\",\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a\n          href=\"https://componentdriven.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page\n        states without needing to navigate to them in your app. Here are some\n        handy patterns for managing page data in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose\n          such data from the \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock\n          these services out using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a\n          href=\"https://storybook.js.org/tutorials/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a\n          href=\"https://storybook.js.org/docs\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg\n          width=\"10\"\n          height=\"10\"\n          viewBox=\"0 0 12 12\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: [\"./page.css\"],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: \"Jane Doe\" };\n  }\n\n  doCreateAccount() {\n    this.user = { name: \"Jane Doe\" };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "SlideboxComponent",
            "id": "component-SlideboxComponent-c72c3561df41fd854e80316cd8c9e547ccfff0534d6e0f02173cc950236c2aef61dd3a7728b3d6ed2bac2423cd57c5a68a7584eec7ae43648557087a910fd8d3",
            "file": "src/components/si/slidebox/slidebox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "apec-slidebox",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./slidebox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dataOff",
                    "defaultValue": "\"non\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "dataOn",
                    "defaultValue": "\"oui\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                },
                {
                    "name": "modelChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "modelValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: \"apec-slidebox\",\r\n  templateUrl: \"./slidebox.component.html\",\r\n})\r\nexport class SlideboxComponent {\r\n  @Input() label: string;\r\n  @Input() dataOn = \"oui\";\r\n  @Input() dataOff = \"non\";\r\n  @Input() disabled: boolean;\r\n  @Output() change = new EventEmitter();\r\n  @Output() modelChange = new EventEmitter();\r\n  modelValue: any;\r\n\r\n  @Input()\r\n  get model() {\r\n    return this.modelValue;\r\n  }\r\n\r\n  set model(val) {\r\n    this.modelValue = val;\r\n    this.modelChange.emit(this.modelValue);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "model": {
                    "name": "model",
                    "setSignature": {
                        "name": "model",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 21,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "model",
                        "type": "",
                        "returnType": "",
                        "line": 17
                    }
                }
            },
            "templateData": "<div class=\"filter-option\">\r\n  <span>{{ label }}</span>\r\n  <label class=\"toggle-switch\">\r\n    <input class=\"toggle-switch-input\" type=\"checkbox\" [(ngModel)]=\"model\" [disabled]=\"disabled\" (change)=\"change.emit()\" />\r\n    <span class=\"toggle-switch-label\" attr.data-on=\"{{ dataOn }}\" attr.data-off=\"{{ dataOff }}\"></span>\r\n    <span class=\"toggle-switch-handle\"></span>\r\n  </label>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-5ab1efd0381d9217be8ed997a59b997598f167ee28852d679fac54c0d7322d32090862446c7126730d5cb8672c31fd9f7baab0cf10db9d1012c3cd137b4750c9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { BrowserModule } from \"@angular/platform-browser\";\n\nimport { AppComponent } from \"./app.component\";\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Playground",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/example/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<Button>",
                "defaultValue": "(args: Button) => ({ props: args })"
            },
            {
                "name": "Playground",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/example/header/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<Button>",
                "defaultValue": "(args: Button) => ({ props: args })"
            },
            {
                "name": "Playground",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/maquette/calendar/calendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<Calendar>",
                "defaultValue": "(args: Calendar) => ({\n  props: args,\n})"
            },
            {
                "name": "Playground",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/si/multiple-checkbox/multiple-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<MultipleCheckboxComponent>",
                "defaultValue": "(\n  args: MultipleCheckboxComponent\n) => ({ props: args })"
            },
            {
                "name": "Playground",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/example/page/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<Button>",
                "defaultValue": "(args: Button) => ({ props: args })"
            },
            {
                "name": "Playground",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/si/slidebox/slidebox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<SlideboxComponent>",
                "defaultValue": "(\n  args: SlideboxComponent\n) => ({ props: args })"
            },
            {
                "name": "Playground",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/components/maquette/plage-horaire/creer-plage.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<CreerPlageComponent>",
                "defaultValue": "(\n  args: CreerPlageComponent\n) => ({ props: args })"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/components/example/button/Button.stories.ts": [
                {
                    "name": "Playground",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/example/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<Button>",
                    "defaultValue": "(args: Button) => ({ props: args })"
                }
            ],
            "src/components/example/header/Header.stories.ts": [
                {
                    "name": "Playground",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/example/header/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<Button>",
                    "defaultValue": "(args: Button) => ({ props: args })"
                }
            ],
            "src/components/maquette/calendar/calendar.stories.ts": [
                {
                    "name": "Playground",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/maquette/calendar/calendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<Calendar>",
                    "defaultValue": "(args: Calendar) => ({\n  props: args,\n})"
                }
            ],
            "src/components/si/multiple-checkbox/multiple-checkbox.stories.ts": [
                {
                    "name": "Playground",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/si/multiple-checkbox/multiple-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<MultipleCheckboxComponent>",
                    "defaultValue": "(\n  args: MultipleCheckboxComponent\n) => ({ props: args })"
                }
            ],
            "src/components/example/page/Page.stories.ts": [
                {
                    "name": "Playground",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/example/page/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<Button>",
                    "defaultValue": "(args: Button) => ({ props: args })"
                }
            ],
            "src/components/si/slidebox/slidebox.stories.ts": [
                {
                    "name": "Playground",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/si/slidebox/slidebox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<SlideboxComponent>",
                    "defaultValue": "(\n  args: SlideboxComponent\n) => ({ props: args })"
                }
            ],
            "src/components/maquette/plage-horaire/creer-plage.stories.ts": [
                {
                    "name": "Playground",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/components/maquette/plage-horaire/creer-plage.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<CreerPlageComponent>",
                    "defaultValue": "(\n  args: CreerPlageComponent\n) => ({ props: args })"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 5,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/components/example/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/example/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Playground",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/example/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/components/example/header/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Playground",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/example/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/components/example/page/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Playground",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/example/page/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/components/maquette/calendar/calendar.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "Calendar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/maquette/calendar/calendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Playground",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/maquette/plage-horaire/creer-plage.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreerPlageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/maquette/plage-horaire/creer-plage.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Playground",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/si/multiple-checkbox/multiple-checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MultipleCheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/components/si/multiple-checkbox/multiple-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Playground",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/components/si/slidebox/slidebox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SlideboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/components/si/slidebox/slidebox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Playground",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}